{"version":3,"sources":["chordsWiki.js","WikiManager.js","Wiki.js","chordsData.js","Keyboard.js"],"names":["chordsWiki","WikiManager","params","CONST","CSS","EAST_AREA","WEST_AREA","LABEL","SUBTITLE_EAST","SUBTITLE_WEST","SELECTOR","config","rootElement","$","dataSource","chordsData","instrument","extend","this","container","eastContainer","westContainer","wiki","self","init","render","initWiki","appendSubElements","append","Wiki","addObserver","mainContent","renderEast","renderWest","addClass","subtitleEast","text","subtitleWest","onSelectionChangedHandler","data","displayChordDetails","chord","category","onSelectionResetHandler","cleanChordDetails","luga","Notifier","PLEASE_SELECT_CHORD","PLEASE_SELECT_CATEGORY","EVENT","SELECTION_CHANGED","SELECTION_RESET","TEMPLATE_SELECTOR","CHORD_TYPES","CHORD_CATEGORIES","chordSelect","categorySelect","initializeSelect","loadData","attachEvents","select","placeholder","option","val","populateSelect","html","selectObj","templateScript","template","Handlebars","compile","handleOnSelectionChange","isSelectionValid","notifyObservers","err","console","log","change","chord_types","id","label","chord_categories","Keyboard","KEYBOARD","WHITE_KEY","BLACK_KEY","PRESSED_KEY","KEYBOARD_CONTAINER","NOTES","KEYS","ATTRIBUTE","KEY","ERROR","CHORD_NOT_FOUND","instrumentChordsData","chord_instances","chord_id","type_id","notes","key","notesTextRow","createWhiteKey","addBlackKey","whiteKeyId","blackKeyId","whiteKey","attr","blackKey","keyboardContainer","keyboardInstrument","notesLookup","chordInstances","c","parseInt","getNotesProperty","noteIds","prop","properties","n","indexOf","push","displayTextualDetails","notesLabels","join","cleanTextualDetails","empty","colorKeys","keys","k","find","cleanKeys","removeClass","length"],"mappings":"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","file":"chordsWiki.min.js","sourcesContent":["/* istanbul ignore if */\r\nif (typeof(jQuery) === 'undefined') {\r\n\tthrow('Unable to find jQuery');\r\n}\r\n/* istanbul ignore else */\r\nif (typeof(chordsWiki) === 'undefined') {\r\n\t/* jshint ignore:start */\r\n\tvar chordsWiki = {};\r\n\t/* jshint ignore:end */\r\n}","/**\r\n * Data broadcast by the Wiki, after both selection fields change and valid values are selected\r\n *\r\n * @typedef {Object} chordsWiki.WikiManager.Chord\r\n * @property {number} chord - The id of the selected chord\r\n * @property {number} category - The id of the selected category\r\n */\r\n\r\n(function() {\r\n\t'use strict';\r\n\t/**\r\n\t * Constructor of the chords wiki widget\r\n\t * @param {jQuery} params.rootElement - the jQuery container for the chords wiki widget\r\n\t * @param {Object} params.dataSource - data with the list of chords types and categories\r\n\t * @param {Object} params.instrument - the instrument widget that needs to communicate with the Wiki object\r\n\t * @constructor\r\n\t * @listens selectionChanged\r\n\t * @listens selectionReset\r\n\t */\r\n\tchordsWiki.WikiManager = function(params) {\r\n\r\n\t\tvar CONST = {\r\n\t\t\tCSS: {\r\n\t\t\t\tEAST_AREA: 'chordsWiki_east_area',\r\n\t\t\t\tWEST_AREA: 'chordsWiki_west_area'\r\n\t\t\t},\r\n\t\t\tLABEL: {\r\n\t\t\t\tSUBTITLE_EAST: 'Chord selection',\r\n\t\t\t\tSUBTITLE_WEST: 'Chord details'\r\n\t\t\t},\r\n\t\t\tSELECTOR: {\r\n\t\t\t\tEAST_AREA: '.chordsWiki_east_area',\r\n\t\t\t\tWEST_AREA: '.chordsWiki_west_area'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar config = {\r\n\t\t\trootElement: $('body'),\r\n\t\t\tdataSource: chordsWiki.chordsData,\r\n\t\t\tinstrument: null\r\n\t\t};\r\n\r\n\t\t$.extend(config, params);\r\n\r\n\t\tthis.container = $('<div>');\r\n\r\n\t\tvar eastContainer = null;\r\n\t\tvar westContainer = null;\r\n\r\n\t\t/**\r\n\t\t * @type {chordsWiki.Wiki}\r\n\t\t */\r\n\t\tvar wiki = null;\r\n\t\tvar instrument = null;\r\n\r\n\t\tvar self = this;\r\n\r\n\t\tvar init = function() {\r\n\t\t\trender();\r\n\t\t\tinitWiki();\r\n\t\t\tinstrument = config.instrument;\r\n\t\t\tappendSubElements();\r\n\t\t\tconfig.rootElement.append(self.container);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Instantiate and initialize the Wiki object. Listen to its events.\r\n\t\t */\r\n\t\tvar initWiki = function() {\r\n\t\t\twiki = new chordsWiki.Wiki({\r\n\t\t\t\tdataSource: chordsWiki.chordsData\r\n\t\t\t});\r\n\t\t\twiki.addObserver(self);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Render the UI\r\n\t\t */\r\n\t\tvar render = function() {\r\n\r\n\t\t\tvar mainContent = $('<main>');\r\n\r\n\t\t\tmainContent.append(renderEast());\r\n\t\t\tmainContent.append(renderWest());\r\n\r\n\t\t\tself.container.append(mainContent);\r\n\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Render the east area of the UI\r\n\t\t * @returns {jQuery} eastContainer - the jQuery wrapper of the html element containing the east area of the widget\r\n\t\t */\r\n\t\tvar renderEast = function() {\r\n\r\n\t\t\teastContainer = $('<div>');\r\n\t\t\teastContainer.addClass(CONST.CSS.EAST_AREA);\r\n\t\t\tvar subtitleEast = $('<h2>');\r\n\t\t\tsubtitleEast.text(CONST.LABEL.SUBTITLE_EAST);\r\n\t\t\teastContainer.append(subtitleEast);\r\n\t\t\treturn eastContainer;\r\n\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Render the west area of the UI\r\n\t\t * @returns {jQuery} westContainer - the jQuery wrapper of the html element containing the west area of the widget\r\n\t\t */\r\n\t\tvar renderWest = function() {\r\n\r\n\t\t\twestContainer = $('<div>');\r\n\t\t\twestContainer.addClass(CONST.CSS.WEST_AREA);\r\n\t\t\tvar subtitleWest = $('<h2>');\r\n\t\t\tsubtitleWest.text(CONST.LABEL.SUBTITLE_WEST);\r\n\t\t\twestContainer.append(subtitleWest);\r\n\t\t\treturn westContainer;\r\n\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Append to the east and west container respectively the wiki element and the instrument element\r\n\t\t */\r\n\t\tvar appendSubElements = function() {\r\n\r\n\t\t\t//append the wiki\r\n\t\t\teastContainer.append(wiki.container);\r\n\r\n\t\t\t//append the instrument, if any\r\n\t\t\tif(instrument !== null){\r\n\t\t\t\twestContainer.append(instrument.container);\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tinit();\r\n\r\n\t\t/* NOTIFICATION HANDLERS */\r\n\r\n\t\t/**\r\n\t\t * Listen to the \"selectionChanged\" event notifications broadcast by the Wiki\r\n\t\t * @param {chordsWiki.WikiManager.Chord} data\r\n\t\t */\r\n\t\tthis.onSelectionChangedHandler = function(data){\r\n\t\t\tif(instrument !== null){\r\n\t\t\t\tinstrument.displayChordDetails(data.chord, data.category);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Listen to the \"selectionReset\" event notifications broadcast by the Wiki\r\n\t\t */\r\n\t\tthis.onSelectionResetHandler = function(data){\r\n\t\t\tif(instrument !== null){\r\n\t\t\t\tinstrument.cleanChordDetails();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t};\r\n\r\n}());\r\n","(function() {\r\n\t'use strict';\r\n\t/**\r\n\t * Constructor of the chords wiki\r\n\t * @param {Object} params.dataSource - data with the list of chords types and categories\r\n\t * @constructor\r\n\t * @extend luga.Notifier\r\n\t * @fires selectionChanged\r\n\t * @fires selectionReset\r\n\t */\r\n\tchordsWiki.Wiki = function(params) {\r\n\r\n\t\tluga.extend(luga.Notifier, this);\r\n\r\n\t\tvar CONST = {\r\n\t\t\tLABEL: {\r\n\t\t\t\tPLEASE_SELECT_CHORD: 'Please select a chord',\r\n\t\t\t\tPLEASE_SELECT_CATEGORY: 'Please select a category'\r\n\t\t\t},\r\n\t\t\tEVENT: {\r\n\t\t\t\tSELECTION_CHANGED : 'selectionChanged',\r\n\t\t\t\tSELECTION_RESET : 'selectionReset'\r\n\t\t\t},\r\n\t\t\tTEMPLATE_SELECTOR: {\r\n\t\t\t\tCHORD_TYPES: '#chordsTypes',\r\n\t\t\t\tCHORD_CATEGORIES: '#chordsCategories'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar config = {\r\n\t\t\tdataSource: chordsWiki.chordsData\r\n\t\t};\r\n\r\n\t\t$.extend(config, params);\r\n\r\n\t\tvar self = this;\r\n\r\n\t\tthis.container = $('<div>');\r\n\r\n\t\tvar chordSelect = null;\r\n\t\tvar categorySelect = null;\r\n\r\n\t\tvar init = function() {\r\n\t\t\tchordSelect = initializeSelect(chordSelect, CONST.LABEL.PLEASE_SELECT_CHORD);\r\n\t\t\tcategorySelect = initializeSelect(categorySelect, CONST.LABEL.PLEASE_SELECT_CATEGORY);\r\n\t\t\trender();\r\n\t\t\tloadData();\r\n\t\t\tattachEvents();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Initialize select field\r\n\t\t * @param {Object} select - The selection field object.\r\n\t\t * @param {string} placeholder - The placeholder for the selection field.\r\n\t\t * @returns {jQuery} select - The initialized selection field jQuery object\r\n\t\t */\r\n\t\tvar initializeSelect = function(select, placeholder) {\r\n\r\n\t\t\tselect = $('<select>');\r\n\t\t\tvar option = $('<option>');\r\n\t\t\toption.text(placeholder);\r\n\t\t\toption.val('');\r\n\t\t\tselect.append(option);\r\n\t\t\treturn select;\r\n\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Render the UI\r\n\t\t */\r\n\t\tvar render = function() {\r\n\r\n\t\t\t//Append the selection fields to the container\r\n\t\t\tself.container.append(chordSelect);\r\n\t\t\tself.container.append(categorySelect);\r\n\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Load data via chordsData object (default option) or via an external json object\r\n\t\t */\r\n\t\tvar loadData = function() {\r\n\t\t\tvar data = config.dataSource;\r\n\t\t\tpopulateSelect(data, chordSelect, $(CONST.TEMPLATE_SELECTOR.CHORD_TYPES).html());\r\n\t\t\tpopulateSelect(data, categorySelect, $(CONST.TEMPLATE_SELECTOR.CHORD_CATEGORIES).html());\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Populate select field given the data array and the select object\r\n\t\t * @param {Object} data - the object containing data to be parsed.\r\n\t\t * @param {jQuery} selectObj - the selection field to be populated.\r\n\t\t * @param {Object} templateScript - the Handlebars template script.\r\n\t\t */\r\n\t\tvar populateSelect = function(data, selectObj, templateScript) {\r\n\t\t\tvar template = Handlebars.compile (templateScript);\r\n\t\t\tselectObj.append(template(data));\r\n\t\t};\r\n\r\n\t\tvar handleOnSelectionChange = function() {\r\n\t\t\tif (isSelectionValid()) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tself.notifyObservers(CONST.EVENT.SELECTION_CHANGED, { chord: chordSelect.val(), category: categorySelect.val()});\r\n\t\t\t\t}catch(err){\r\n\t\t\t\t\tconsole.log(err);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tself.notifyObservers(CONST.EVENT.SELECTION_RESET, {});\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Attach events to UI elements\r\n\t\t */\r\n\t\tvar attachEvents = function() {\r\n\t\t\tchordSelect.change(handleOnSelectionChange);\r\n\t\t\tcategorySelect.change(handleOnSelectionChange);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Check if the selected option is valid (is not the placeholder)\r\n\t\t */\r\n\t\tvar isSelectionValid = function() {\r\n\t\t\treturn (chordSelect.val() !== '' && categorySelect.val() !== '');\r\n\t\t};\r\n\r\n\t\tinit();\r\n\r\n\t};\r\n\r\n}());","/* jshint camelcase: false, quotmark: double */\r\n\r\nif (typeof(chordsWiki.chordsData) === \"undefined\") {\r\n\r\n\tchordsWiki.chordsData = {\r\n\t\t\"chord_types\": [\r\n\t\t\t{\r\n\t\t\t\t\"id\": 0,\r\n\t\t\t\t\"label\": \"C\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": 1,\r\n\t\t\t\t\"label\": \"D\"\r\n\t\t\t}\r\n\t\t],\r\n\t\t\"chord_categories\": [\r\n\t\t\t{\r\n\t\t\t\t\"id\": 0,\r\n\t\t\t\t\"label\": \"major\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": 1,\r\n\t\t\t\t\"label\": \"minor\"\r\n\t\t\t}\r\n\t\t]\r\n\t};\r\n\r\n}","(function() {\r\n\t'use strict';\r\n\t/**\r\n\t * Constructor of the Keyboard instrument\r\n\t * @constructor\r\n\t */\r\n\tchordsWiki.Keyboard = function(params) {\r\n\r\n\t\tvar CONST = {\r\n\t\t\tCSS: {\r\n\t\t\t\tKEYBOARD: 'chordsWiki_keyboard',\r\n\t\t\t\tWHITE_KEY: 'chordsWiki_white_key',\r\n\t\t\t\tBLACK_KEY: 'chordsWiki_black_key',\r\n\t\t\t\tPRESSED_KEY: 'chordsWiki_pressed_key',\r\n\t\t\t\tKEYBOARD_CONTAINER: 'chordsWiki_keyboard_container'\r\n\t\t\t},\r\n\t\t\tLABEL: {\r\n\t\t\t\tNOTES: 'Notes',\r\n\t\t\t\tKEYS: 'Keys'\r\n\t\t\t},\r\n\t\t\tSELECTOR: {\r\n\t\t\t\tWHITE_KEY: '.chordsWiki_white_key',\r\n\t\t\t\tBLACK_KEY: '.chordsWiki_black_key'\r\n\t\t\t},\r\n\t\t\tATTRIBUTE: {\r\n\t\t\t\tKEY: 'data-key'\r\n\t\t\t},\r\n\t\t\tERROR: {\r\n\t\t\t\tCHORD_NOT_FOUND: 'Chord not found'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tvar config = {\r\n\r\n\t\t};\r\n\r\n\t\t$.extend(config, params);\r\n\r\n\t\tthis.container = $('<div>');\r\n\r\n\t\t/* jshint ignore:start */\r\n\t\tvar instrumentChordsData = {\r\n\t\t\t\"chord_instances\": [{\r\n\t\t\t\t\"chord_id\": 0,\r\n\t\t\t\t\"type_id\": 0,\r\n\t\t\t\t\"notes\": [1, 7, 13]\r\n\t\t\t}, {\r\n\t\t\t\t\"chord_id\": 0,\r\n\t\t\t\t\"type_id\": 1,\r\n\t\t\t\t\"notes\": [1, 6, 13]\r\n\t\t\t}, {\r\n\t\t\t\t\"chord_id\": 1,\r\n\t\t\t\t\"type_id\": 0,\r\n\t\t\t\t\"notes\": [4, 11, 16]\r\n\t\t\t}, {\r\n\t\t\t\t\"chord_id\": 1,\r\n\t\t\t\t\"type_id\": 1,\r\n\t\t\t\t\"notes\": [4, 10, 16]\r\n\t\t\t}\r\n\r\n\t\t\t],\r\n\t\t\t\"notes\": [{\r\n\t\t\t\t\"id\": 0,\r\n\t\t\t\t\"label\": \"Cb\",\r\n\t\t\t\t\"key\": 11\r\n\t\t\t}, {\r\n\t\t\t\t\"id\": 1,\r\n\t\t\t\t\"label\": \"C\",\r\n\t\t\t\t\"key\": 0\r\n\t\t\t}, {\r\n\t\t\t\t\"id\": 2,\r\n\t\t\t\t\"label\": \"C#\",\r\n\t\t\t\t\"key\": 1\r\n\t\t\t}, {\r\n\t\t\t\t\"id\": 3,\r\n\t\t\t\t\"label\": \"Db\",\r\n\t\t\t\t\"key\": 1\r\n\t\t\t}, {\r\n\t\t\t\t\"id\": 4,\r\n\t\t\t\t\"label\": \"D\",\r\n\t\t\t\t\"key\": 2\r\n\t\t\t}, {\r\n\t\t\t\t\"id\": 5,\r\n\t\t\t\t\"label\": \"D#\",\r\n\t\t\t\t\"key\": 3\r\n\t\t\t}, {\r\n\t\t\t\t\"id\": 6,\r\n\t\t\t\t\"label\": \"Eb\",\r\n\t\t\t\t\"key\": 3\r\n\t\t\t}, {\r\n\t\t\t\t\"id\": 7,\r\n\t\t\t\t\"label\": \"E\",\r\n\t\t\t\t\"key\": 4\r\n\t\t\t}, {\r\n\t\t\t\t\"id\": 8,\r\n\t\t\t\t\"label\": \"E#\",\r\n\t\t\t\t\"key\": 5\r\n\t\t\t}, {\r\n\t\t\t\t\"id\": 9,\r\n\t\t\t\t\"label\": \"Fb\",\r\n\t\t\t\t\"key\": 4\r\n\t\t\t}, {\r\n\t\t\t\t\"id\": 10,\r\n\t\t\t\t\"label\": \"F\",\r\n\t\t\t\t\"key\": 5\r\n\t\t\t}, {\r\n\t\t\t\t\"id\": 11,\r\n\t\t\t\t\"label\": \"F#\",\r\n\t\t\t\t\"key\": 6\r\n\t\t\t}, {\r\n\t\t\t\t\"id\": 12,\r\n\t\t\t\t\"label\": \"Gb\",\r\n\t\t\t\t\"key\": 6\r\n\t\t\t}, {\r\n\t\t\t\t\"id\": 13,\r\n\t\t\t\t\"label\": \"G\",\r\n\t\t\t\t\"key\": 7\r\n\t\t\t}, {\r\n\t\t\t\t\"id\": 14,\r\n\t\t\t\t\"label\": \"G#\",\r\n\t\t\t\t\"key\": 8\r\n\t\t\t}, {\r\n\t\t\t\t\"id\": 15,\r\n\t\t\t\t\"label\": \"Ab\",\r\n\t\t\t\t\"key\": 8\r\n\t\t\t}, {\r\n\t\t\t\t\"id\": 16,\r\n\t\t\t\t\"label\": \"A\",\r\n\t\t\t\t\"key\": 9\r\n\t\t\t}, {\r\n\t\t\t\t\"id\": 17,\r\n\t\t\t\t\"label\": \"A#\",\r\n\t\t\t\t\"key\": 10\r\n\t\t\t}, {\r\n\t\t\t\t\"id\": 18,\r\n\t\t\t\t\"label\": \"Bb\",\r\n\t\t\t\t\"key\": 10\r\n\t\t\t}, {\r\n\t\t\t\t\"id\": 19,\r\n\t\t\t\t\"label\": \"B\",\r\n\t\t\t\t\"key\": 11\r\n\t\t\t}, {\r\n\t\t\t\t\"id\": 20,\r\n\t\t\t\t\"label\": \"B#\",\r\n\t\t\t\t\"key\": 0\r\n\t\t\t}]\r\n\t\t};\r\n\t\t/* jshint ignore:end */\r\n\r\n\t\tvar notesTextRow = null;\r\n\r\n\t\tvar self = this;\r\n\r\n\t\tvar init = function() {\r\n\t\t\tself.container.append(render());\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Create the key object\r\n\t\t * @param {boolean} addBlackKey - Flag to define the type of keyboard key (with black key following or not).\r\n\t\t * @param {string} whiteKeyId - The key attribute unequivocally identifying the white key\r\n\t\t * @param {string} blackKeyId - The key attribute unequivocally identifying the black key\r\n\t\t * @returns {jQuery} whiteKey - The keyboard key jQuery object generated\r\n\t\t */\r\n\t\tvar createWhiteKey = function(addBlackKey, whiteKeyId, blackKeyId) {\r\n\t\t\tvar whiteKey = $('<div>');\r\n\t\t\twhiteKey.addClass(CONST.CSS.WHITE_KEY);\r\n\t\t\twhiteKey.attr(CONST.ATTRIBUTE.KEY, whiteKeyId);\r\n\t\t\tif (addBlackKey === true) {\r\n\t\t\t\tvar blackKey = $('<div>');\r\n\t\t\t\tblackKey.addClass(CONST.CSS.BLACK_KEY);\r\n\t\t\t\tblackKey.attr(CONST.ATTRIBUTE.KEY, blackKeyId);\r\n\t\t\t\twhiteKey.append(blackKey);\r\n\t\t\t}\r\n\t\t\treturn whiteKey;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Render the UI of the keyboard\r\n\t\t */\r\n\t\tvar render = function() {\r\n\t\t\tvar keyboardContainer = $('<div>');\r\n\t\t\tkeyboardContainer.addClass(CONST.CSS.KEYBOARD_CONTAINER);\r\n\t\t\tvar keyboardInstrument = $('<div>');\r\n\t\t\tkeyboardInstrument.addClass(CONST.CSS.KEYBOARD);\r\n\r\n\t\t\tkeyboardInstrument.append(createWhiteKey(true,0,1));\r\n\t\t\tkeyboardInstrument.append(createWhiteKey(true,2,3));\r\n\t\t\tkeyboardInstrument.append(createWhiteKey(false,4));\r\n\t\t\tkeyboardInstrument.append(createWhiteKey(true,5,6));\r\n\t\t\tkeyboardInstrument.append(createWhiteKey(true,7,8));\r\n\t\t\tkeyboardInstrument.append(createWhiteKey(true,9,10));\r\n\t\t\tkeyboardInstrument.append(createWhiteKey(false,11));\r\n\r\n\t\t\tkeyboardContainer.append(keyboardInstrument);\r\n\t\t\treturn keyboardContainer;\r\n\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Retrieve the set of notes given the chord and the category\r\n\t\t * @param {string} chord - The id of the chord selected\r\n\t\t * @param {string} category - The id of the chord category selected\r\n\t\t * @returns {string[]}\r\n\t\t */\r\n\t\tvar notesLookup = function(chord, category) {\r\n\t\t\tvar chordInstances = instrumentChordsData.chord_instances;\r\n\t\t\tfor (var c in chordInstances) {\r\n\t\t\t\tif (chordInstances[c].chord_id === parseInt(chord) && chordInstances[c].type_id === parseInt(category)) {\r\n\t\t\t\t\treturn chordInstances[c].notes;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn [];\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Get notes property given the array of notes ids and the name of the property\r\n\t\t * @param {string[]} noteIds - The array containing the list of notes ids\r\n\t\t * @returns {string[]}\r\n\t\t */\r\n\t\tvar getNotesProperty = function(noteIds, prop) {\r\n\t\t\tvar notes = instrumentChordsData.notes;\r\n\t\t\tvar properties = [];\r\n\t\t\tfor (var n in notes) {\r\n\t\t\t\tif (noteIds.indexOf(notes[n].id) > -1) {\r\n\t\t\t\t\tproperties.push(notes[n][prop]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn properties;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Display textual details about the selected chord\r\n\t\t * @param {string[]} notes - The array containing the list of notes ids\r\n\t\t */\r\n\t\tvar displayTextualDetails = function(notes){\r\n\t\t\tvar notesLabels = getNotesProperty(notes, 'label');\r\n\t\t\tif (notesTextRow === null) {\r\n\t\t\t\tnotesTextRow = $('<span>');\r\n\t\t\t\tself.container.append(notesTextRow);\r\n\t\t\t}\r\n\t\t\tnotesTextRow.text(CONST.LABEL.NOTES + ' ' + notesLabels.join() + ' ' + CONST.LABEL.KEYS + ' ' + notesLabels.join());\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Clean chord textual details\r\n\t\t */\r\n\t\tvar cleanTextualDetails = function(){\r\n\t\t\tif (notesTextRow !== null) {\r\n\t\t\t\tnotesTextRow.empty();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Display notes on keyboard\r\n\t\t * @param {string[]} notes - The array containing the list of notes ids\r\n\t\t */\r\n\t\tvar colorKeys = function(notes){\r\n\t\t\tvar keys = getNotesProperty(notes, 'key');\r\n\t\t\tfor(var k in keys){\r\n\t\t\t\tself.container.find( '['+CONST.ATTRIBUTE.KEY+'= \"'+keys[k]+'\"]').addClass(CONST.CSS.PRESSED_KEY);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Clean notes on keyboard\r\n\t\t */\r\n\t\tvar cleanKeys = function(){\r\n\t\t\tself.container.find(CONST.SELECTOR.BLACK_KEY).removeClass(CONST.CSS.PRESSED_KEY);\r\n\t\t\tself.container.find(CONST.SELECTOR.WHITE_KEY).removeClass(CONST.CSS.PRESSED_KEY);\r\n\t\t};\r\n\r\n\r\n\t\t/**\r\n\t\t * Display chord details\r\n\t\t * @param {string} chord - The id of the chord selected\r\n\t\t * @param {string} category - The id of the chord category selected\r\n\t\t */\r\n\t\tthis.displayChordDetails = function(chord, category) {\r\n\t\t\t//clean notes details\r\n\t\t\tself.cleanChordDetails();\r\n\r\n\t\t\t//retrieve chord details\r\n\t\t\tvar notes = notesLookup(chord, category);\r\n\t\t\tif(notes.length===0){\r\n\t\t\t\tthrow CONST.ERROR.CHORD_NOT_FOUND;\r\n\t\t\t}\r\n\r\n\t\t\t//display chord textual details (notes, keys)\r\n\t\t\tdisplayTextualDetails(notes);\r\n\r\n\t\t\t//display notes on keyboard, coloring keys\r\n\t\t\tcolorKeys(notes);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Clean chord details\r\n\t\t */\r\n\t\tthis.cleanChordDetails = function() {\r\n\t\t\tcleanTextualDetails();\r\n\t\t\tcleanKeys();\r\n\t\t};\r\n\r\n\t\tinit();\r\n\r\n\t};\r\n\r\n}());"],"sourceRoot":"."}